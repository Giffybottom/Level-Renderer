// "Platform_CenterRight.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Platform_CenterRight.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Platform_CenterRight_version_
const char Platform_CenterRight_version[4] = { '0','1','9','d' };
#define _Platform_CenterRight_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Platform_CenterRight_vertexcount_
const unsigned Platform_CenterRight_vertexcount = 82;
#define _Platform_CenterRight_vertexcount_
#endif
#ifndef _Platform_CenterRight_indexcount_
const unsigned Platform_CenterRight_indexcount = 168;
#define _Platform_CenterRight_indexcount_
#endif
#ifndef _Platform_CenterRight_materialcount_
const unsigned Platform_CenterRight_materialcount = 1; // can be used for batched draws
#define _Platform_CenterRight_materialcount_
#endif
#ifndef _Platform_CenterRight_meshcount_
const unsigned Platform_CenterRight_meshcount = 1;
#define _Platform_CenterRight_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Platform_CenterRight_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Platform_CenterRight_vertices[82] =
{
	{	{ 0.800283f, -0.999998f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999000f, -0.000000f, 0.044200f }	},
	{	{ 0.800284f, 0.999998f, 0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999000f, -0.000000f, 0.044200f }	},
	{	{ 0.773948f, 0.999998f, 0.594611f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999000f, -0.000000f, 0.044200f }	},
	{	{ -1.000000f, 0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.511407f, 0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.511408f, -0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.695130f, -0.999998f, -1.090356f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.987600f, -0.000000f, -0.157000f }	},
	{	{ 0.695131f, 0.999998f, -1.090356f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.987600f, -0.000000f, -0.157000f }	},
	{	{ 0.773948f, 0.999998f, -0.594610f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.987600f, -0.000000f, -0.157000f }	},
	{	{ 0.773947f, -0.999998f, -0.594610f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999000f, -0.000000f, -0.044200f }	},
	{	{ 0.773948f, 0.999998f, -0.594610f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999000f, -0.000000f, -0.044200f }	},
	{	{ 0.800284f, 0.999998f, 0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999000f, -0.000000f, -0.044200f }	},
	{	{ 0.564018f, 0.999998f, -1.388373f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.915300f, -0.000000f, -0.402700f }	},
	{	{ 0.695131f, 0.999998f, -1.090356f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.915300f, -0.000000f, -0.402700f }	},
	{	{ 0.695130f, -0.999998f, -1.090356f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.915300f, -0.000000f, -0.402700f }	},
	{	{ 0.361690f, -0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.652600f, -0.000000f, -0.757700f }	},
	{	{ 0.361690f, 0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.652600f, -0.000000f, -0.757700f }	},
	{	{ 0.564018f, 0.999998f, -1.388373f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.652600f, -0.000000f, -0.757700f }	},
	{	{ -0.031826f, 0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ -0.031826f, -0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.031825f, 0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.511407f, 0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.031826f, -0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.361690f, 0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.361690f, -0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.361690f, 0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.695130f, -0.999998f, 1.090357f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.915300f, -0.000000f, 0.402700f }	},
	{	{ 0.695131f, 0.999998f, 1.090357f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.915300f, -0.000000f, 0.402700f }	},
	{	{ 0.564018f, 0.999998f, 1.388374f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.915300f, -0.000000f, 0.402700f }	},
	{	{ -0.511408f, -0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -1.000000f, 0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.564018f, -0.999998f, 1.388374f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.652600f, -0.000000f, 0.757700f }	},
	{	{ 0.564018f, 0.999998f, 1.388374f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.652600f, -0.000000f, 0.757700f }	},
	{	{ 0.361690f, 0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.652600f, -0.000000f, 0.757700f }	},
	{	{ 0.773947f, -0.999998f, 0.594611f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.987600f, -0.000000f, 0.157000f }	},
	{	{ 0.773948f, 0.999998f, 0.594611f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.987600f, -0.000000f, 0.157000f }	},
	{	{ 0.695131f, 0.999998f, 1.090357f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.987600f, -0.000000f, 0.157000f }	},
	{	{ -1.000000f, 0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.000000f }	},
	{	{ -1.000000f, 0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.000000f }	},
	{	{ -1.000000f, -0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.000000f }	},
	{	{ 0.564018f, 0.999998f, -1.388373f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.564018f, 0.999998f, 1.388374f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.773948f, 0.999998f, 0.594611f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.361690f, -0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ 0.695130f, -0.999998f, -1.090356f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ 0.800283f, -0.999998f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ -0.511407f, 0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.511407f, 0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -1.000000f, 0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.031826f, 0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.031825f, 0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.361690f, 0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.361690f, 0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.511408f, -0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ -0.511408f, -0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ -1.000000f, -0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ -0.031826f, -0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ -0.031826f, -0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ 0.361690f, -0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ 0.773947f, -0.999998f, 0.594611f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999000f, -0.000000f, 0.044200f }	},
	{	{ -1.000000f, -0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.773947f, -0.999998f, -0.594610f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.987600f, -0.000000f, -0.157000f }	},
	{	{ 0.800283f, -0.999998f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.999000f, -0.000000f, -0.044200f }	},
	{	{ 0.564017f, -0.999998f, -1.388373f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.915300f, -0.000000f, -0.402700f }	},
	{	{ 0.564017f, -0.999998f, -1.388373f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.652600f, -0.000000f, -0.757700f }	},
	{	{ 0.361690f, -0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.564018f, -0.999998f, 1.388374f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.915300f, -0.000000f, 0.402700f }	},
	{	{ -1.000000f, -0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.361690f, -0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.652600f, -0.000000f, 0.757700f }	},
	{	{ 0.695130f, -0.999998f, 1.090357f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.987600f, -0.000000f, 0.157000f }	},
	{	{ -1.000000f, -0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.000000f }	},
	{	{ 0.773948f, 0.999998f, -0.594610f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.695131f, 0.999998f, -1.090356f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.800284f, 0.999998f, 0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.695131f, 0.999998f, 1.090357f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.564017f, -0.999998f, -1.388373f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ 0.695130f, -0.999998f, 1.090357f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ 0.564018f, -0.999998f, 1.388374f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ 0.773947f, -0.999998f, 0.594611f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ 0.773947f, -0.999998f, -0.594610f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ -1.000000f, 0.999998f, 1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -1.000000f, -0.999998f, -1.562631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
};
#define _Platform_CenterRight_vertices_
#endif
#ifndef _Platform_CenterRight_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Platform_CenterRight_indices[168] =
{
	 0, 1, 2,
	 3, 4, 5,
	 6, 7, 8,
	 9, 10, 11,
	 12, 13, 14,
	 15, 16, 17,
	 5, 4, 18,
	 19, 20, 21,
	 22, 18, 23,
	 24, 25, 20,
	 26, 27, 28,
	 29, 21, 30,
	 31, 32, 33,
	 34, 35, 36,
	 37, 38, 39,
	 40, 41, 42,
	 43, 44, 45,
	 46, 47, 48,
	 49, 47, 46,
	 50, 51, 52,
	 53, 54, 55,
	 56, 57, 54,
	 58, 43, 57,
	 0, 2, 59,
	 3, 5, 60,
	 6, 8, 61,
	 9, 11, 62,
	 12, 14, 63,
	 15, 17, 64,
	 5, 18, 22,
	 19, 21, 29,
	 22, 23, 65,
	 24, 20, 19,
	 26, 28, 66,
	 29, 30, 67,
	 31, 33, 68,
	 34, 36, 69,
	 37, 39, 70,
	 51, 40, 52,
	 40, 71, 72,
	 71, 42, 73,
	 42, 41, 74,
	 41, 40, 51,
	 40, 42, 71,
	 75, 43, 58,
	 43, 76, 77,
	 76, 45, 78,
	 45, 44, 79,
	 44, 43, 75,
	 43, 45, 76,
	 46, 48, 80,
	 49, 46, 50,
	 50, 52, 49,
	 53, 55, 81,
	 56, 54, 53,
	 58, 57, 56,
};
#define _Platform_CenterRight_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Platform_CenterRight_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Platform_CenterRight_materials[1] =
{
	{
		{{ 0.293787f, 0.165832f, 0.071064f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078453f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"LightBrown.003",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Platform_CenterRight_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Platform_CenterRight_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Platform_CenterRight_batches[1][2] =
{
	{ 168, 0 },
};
#define _Platform_CenterRight_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Platform_CenterRight_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Platform_CenterRight_meshes[1] =
{
	{
		"Platform_CenterRight.053_LightBrown.003",
		168,
		0,
		0,
	},
};
#define _Platform_CenterRight_meshes_
#endif
