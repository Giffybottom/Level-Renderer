// "Platform_BottomMiddle.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Platform_BottomMiddle.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Platform_BottomMiddle_version_
const char Platform_BottomMiddle_version[4] = { '0','1','9','d' };
#define _Platform_BottomMiddle_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Platform_BottomMiddle_vertexcount_
const unsigned Platform_BottomMiddle_vertexcount = 108;
#define _Platform_BottomMiddle_vertexcount_
#endif
#ifndef _Platform_BottomMiddle_indexcount_
const unsigned Platform_BottomMiddle_indexcount = 258;
#define _Platform_BottomMiddle_indexcount_
#endif
#ifndef _Platform_BottomMiddle_materialcount_
const unsigned Platform_BottomMiddle_materialcount = 1; // can be used for batched draws
#define _Platform_BottomMiddle_materialcount_
#endif
#ifndef _Platform_BottomMiddle_meshcount_
const unsigned Platform_BottomMiddle_meshcount = 1;
#define _Platform_BottomMiddle_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Platform_BottomMiddle_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Platform_BottomMiddle_vertices[108] =
{
	{	{ -0.506901f, 0.301556f, -1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, -0.983400f }	},
	{	{ -1.000000f, 0.301556f, -1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, -0.983400f }	},
	{	{ -1.000000f, 0.999999f, -1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, -0.983400f }	},
	{	{ -1.000000f, -0.495029f, -1.126631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, -0.933000f }	},
	{	{ -1.000000f, 0.301556f, -1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, -0.933000f }	},
	{	{ -0.506901f, 0.301556f, -1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, -0.933000f }	},
	{	{ -1.000000f, 0.999999f, 1.562633f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, 0.983400f }	},
	{	{ -1.000000f, 0.301556f, 1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, 0.983400f }	},
	{	{ -0.506901f, 0.301556f, 1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, 0.983400f }	},
	{	{ -0.506901f, 0.301556f, 1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, 0.933000f }	},
	{	{ -1.000000f, 0.301556f, 1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, 0.933000f }	},
	{	{ -1.000000f, -0.495029f, 1.126632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, 0.933000f }	},
	{	{ -0.506901f, -0.898547f, 0.614527f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, 0.162900f }	},
	{	{ -1.000000f, -0.898545f, 0.614527f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, 0.162900f }	},
	{	{ -1.000000f, -0.999999f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, 0.162900f }	},
	{	{ -1.000000f, -0.898545f, 0.614527f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, 0.618900f }	},
	{	{ -0.506901f, -0.898547f, 0.614527f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, 0.618900f }	},
	{	{ -0.506901f, -0.495029f, 1.126632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, 0.618900f }	},
	{	{ -1.000000f, -0.999999f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, -0.162900f }	},
	{	{ -1.000000f, -0.898547f, -0.614526f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, -0.162900f }	},
	{	{ -0.506901f, -0.898547f, -0.614526f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, -0.162900f }	},
	{	{ -0.506901f, -0.898547f, -0.614526f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, -0.618900f }	},
	{	{ -1.000000f, -0.898547f, -0.614526f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, -0.618900f }	},
	{	{ -1.000000f, -0.495029f, -1.126631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, -0.618900f }	},
	{	{ -0.029994f, -0.495029f, -1.126631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, -0.618900f }	},
	{	{ -0.029994f, -0.898547f, -0.614526f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, -0.618900f }	},
	{	{ -0.029994f, -0.898547f, -0.614526f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, -0.162900f }	},
	{	{ -0.029994f, -0.999999f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, -0.162900f }	},
	{	{ -0.029994f, -0.999999f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, 0.162900f }	},
	{	{ -0.029994f, -0.898545f, 0.614527f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, 0.162900f }	},
	{	{ -0.029994f, -0.898545f, 0.614527f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, 0.618900f }	},
	{	{ -0.029994f, -0.495029f, 1.126632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, 0.618900f }	},
	{	{ -0.029994f, -0.495029f, 1.126632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, 0.933000f }	},
	{	{ -0.029994f, 0.301556f, 1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, 0.933000f }	},
	{	{ -0.029994f, 0.301556f, 1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, 0.983400f }	},
	{	{ -0.029994f, 0.999999f, 1.562633f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, 0.983400f }	},
	{	{ -0.506900f, 0.999999f, 1.562633f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, 0.983400f }	},
	{	{ -0.029994f, 0.301556f, -1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, -0.983400f }	},
	{	{ -0.506900f, 0.999999f, -1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, -0.983400f }	},
	{	{ -0.029994f, 0.301556f, -1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, -0.933000f }	},
	{	{ -0.029994f, -0.495029f, -1.126631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, -0.933000f }	},
	{	{ 0.999999f, 0.999999f, -1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, -0.983400f }	},
	{	{ 0.999999f, 0.301556f, -1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, -0.983400f }	},
	{	{ 0.446913f, 0.301556f, -1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, -0.983400f }	},
	{	{ 0.446913f, 0.301556f, -1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, -0.933000f }	},
	{	{ 0.999999f, 0.301556f, -1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, -0.933000f }	},
	{	{ 0.999999f, -0.495029f, -1.126631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, -0.933000f }	},
	{	{ 0.446913f, 0.301556f, 1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, 0.983400f }	},
	{	{ 0.999999f, 0.301556f, 1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, 0.983400f }	},
	{	{ 0.999999f, 0.999999f, 1.562633f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, 0.983400f }	},
	{	{ 0.999999f, -0.495029f, 1.126632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, 0.933000f }	},
	{	{ 0.999999f, 0.301556f, 1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, 0.933000f }	},
	{	{ 0.446913f, 0.301556f, 1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, 0.933000f }	},
	{	{ 0.999999f, -0.898545f, 0.614527f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, 0.162900f }	},
	{	{ 0.446913f, -0.898547f, 0.614527f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, 0.162900f }	},
	{	{ 0.446914f, -0.999999f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, 0.162900f }	},
	{	{ 0.999999f, -0.898545f, 0.614527f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, 0.618900f }	},
	{	{ 0.999999f, -0.495029f, 1.126632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, 0.618900f }	},
	{	{ 0.446913f, -0.495029f, 1.126632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, 0.618900f }	},
	{	{ 0.999999f, -0.898547f, -0.614526f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, -0.162900f }	},
	{	{ 0.999999f, -0.999999f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, -0.162900f }	},
	{	{ 0.446914f, -0.999999f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, -0.162900f }	},
	{	{ 0.999999f, -0.495029f, -1.126631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, -0.618900f }	},
	{	{ 0.999999f, -0.898547f, -0.614526f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, -0.618900f }	},
	{	{ 0.446913f, -0.898547f, -0.614526f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, -0.618900f }	},
	{	{ 0.446913f, -0.898547f, -0.614526f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, -0.162900f }	},
	{	{ 0.446913f, -0.898547f, 0.614527f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, 0.618900f }	},
	{	{ -0.029994f, 0.999999f, -1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, -0.983400f }	},
	{	{ -1.000000f, 0.999999f, -1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.000000f }	},
	{	{ -1.000000f, 0.301556f, -1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.000000f }	},
	{	{ -1.000000f, 0.301556f, 1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.000000f }	},
	{	{ -0.029994f, 0.999999f, -1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.506900f, 0.999999f, -1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.506900f, 0.999999f, 1.562633f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.999999f, 0.999999f, -1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, -0.000000f, 0.000000f }	},
	{	{ 0.999999f, 0.999999f, 1.562633f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, -0.000000f, 0.000000f }	},
	{	{ 0.999999f, 0.301556f, 1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, -0.000000f, 0.000000f }	},
	{	{ 0.446913f, 0.999999f, -1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.446913f, 0.999999f, 1.562633f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.999999f, 0.999999f, 1.562633f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.029994f, 0.999999f, 1.562633f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -1.000000f, 0.999999f, 1.562633f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -1.000000f, -0.495029f, -1.126631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.000000f }	},
	{	{ -1.000000f, -0.898547f, -0.614526f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.000000f }	},
	{	{ -1.000000f, -0.898545f, 0.614527f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.000000f }	},
	{	{ -1.000000f, -0.999999f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.000000f }	},
	{	{ 0.999999f, -0.495029f, 1.126632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, -0.000000f, 0.000000f }	},
	{	{ 0.999999f, -0.495029f, -1.126631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, -0.000000f, 0.000000f }	},
	{	{ 0.999999f, -0.898545f, 0.614527f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, -0.000000f, 0.000000f }	},
	{	{ 0.999999f, -0.999999f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, -0.000000f, 0.000000f }	},
	{	{ 0.999999f, -0.898547f, -0.614526f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, -0.000000f, 0.000000f }	},
	{	{ -0.506901f, -0.495029f, -1.126631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, -0.933000f }	},
	{	{ -0.506901f, -0.495029f, 1.126632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, 0.933000f }	},
	{	{ -0.506901f, -0.999999f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, 0.162900f }	},
	{	{ -1.000000f, -0.495029f, 1.126632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, 0.618900f }	},
	{	{ -0.506901f, -0.999999f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, -0.162900f }	},
	{	{ -0.506901f, -0.495029f, -1.126631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, -0.618900f }	},
	{	{ 0.446913f, 0.999999f, -1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, -0.983400f }	},
	{	{ 0.446913f, -0.495029f, -1.126631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, -0.933000f }	},
	{	{ 0.446913f, 0.999999f, 1.562633f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.181300f, 0.983400f }	},
	{	{ 0.446913f, -0.495029f, 1.126632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.359900f, 0.933000f }	},
	{	{ 0.999999f, -0.999999f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.986600f, 0.162900f }	},
	{	{ 0.446913f, -0.495029f, -1.126631f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.785500f, -0.618900f }	},
	{	{ -1.000000f, 0.999999f, 1.562633f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.000000f }	},
	{	{ 0.999999f, 0.301556f, -1.433895f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, -0.000000f, 0.000000f }	},
	{	{ 0.999999f, 0.999999f, -1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -1.000000f, 0.999999f, -1.562632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -1.000000f, -0.495029f, 1.126632f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, 0.000000f }	},
};
#define _Platform_BottomMiddle_vertices_
#endif
#ifndef _Platform_BottomMiddle_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Platform_BottomMiddle_indices[258] =
{
	 0, 1, 2,
	 3, 4, 5,
	 6, 7, 8,
	 9, 10, 11,
	 12, 13, 14,
	 15, 16, 17,
	 18, 19, 20,
	 21, 22, 23,
	 24, 25, 21,
	 20, 26, 27,
	 28, 29, 12,
	 30, 31, 17,
	 32, 33, 9,
	 34, 35, 36,
	 37, 0, 38,
	 5, 39, 40,
	 41, 42, 43,
	 44, 45, 46,
	 47, 48, 49,
	 50, 51, 52,
	 53, 54, 55,
	 56, 57, 58,
	 59, 60, 61,
	 62, 63, 64,
	 64, 25, 24,
	 27, 26, 65,
	 54, 29, 28,
	 30, 66, 58,
	 52, 33, 32,
	 35, 34, 47,
	 43, 37, 67,
	 40, 39, 44,
	 68, 69, 70,
	 71, 72, 73,
	 74, 75, 76,
	 77, 78, 79,
	 71, 80, 78,
	 81, 73, 72,
	 70, 69, 82,
	 82, 83, 84,
	 83, 85, 84,
	 76, 86, 87,
	 87, 86, 88,
	 88, 89, 90,
	 87, 88, 90,
	 0, 2, 38,
	 3, 5, 91,
	 6, 8, 36,
	 9, 11, 92,
	 12, 14, 93,
	 15, 17, 94,
	 18, 20, 95,
	 21, 23, 96,
	 24, 21, 96,
	 20, 27, 95,
	 28, 12, 93,
	 30, 17, 16,
	 32, 9, 92,
	 34, 36, 8,
	 37, 38, 67,
	 5, 40, 91,
	 41, 43, 97,
	 44, 46, 98,
	 47, 49, 99,
	 50, 52, 100,
	 53, 55, 101,
	 56, 58, 66,
	 59, 61, 65,
	 62, 64, 102,
	 64, 24, 102,
	 27, 65, 61,
	 54, 28, 55,
	 30, 58, 31,
	 52, 32, 100,
	 35, 47, 99,
	 43, 67, 97,
	 40, 44, 98,
	 68, 70, 103,
	 71, 73, 80,
	 74, 76, 104,
	 77, 79, 105,
	 71, 78, 77,
	 81, 72, 106,
	 70, 82, 107,
	 82, 84, 107,
	 76, 87, 104,
};
#define _Platform_BottomMiddle_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Platform_BottomMiddle_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Platform_BottomMiddle_materials[1] =
{
	{
		{{ 0.293787f, 0.165832f, 0.071064f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078453f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"LightBrown.007",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Platform_BottomMiddle_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Platform_BottomMiddle_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Platform_BottomMiddle_batches[1][2] =
{
	{ 258, 0 },
};
#define _Platform_BottomMiddle_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Platform_BottomMiddle_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Platform_BottomMiddle_meshes[1] =
{
	{
		"Platform_BottomMiddle.050_LightBrown.007",
		258,
		0,
		0,
	},
};
#define _Platform_BottomMiddle_meshes_
#endif
